{"version":3,"sources":["App.js","serviceWorker.js","scripts/scroll-down-arrow.js","index.js"],"names":["App","id","className","fluid","variant","href","icon","faArrowDown","Component","Boolean","window","location","hostname","match","$","document","ready","on","event","this","hash","preventDefault","animate","scrollTop","offset","top","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"yXAwCeA,G,uLA9BX,OACE,6BACE,kBAAC,IAAD,CAAWC,GAAG,WAAWC,UAAU,kDAAkDC,OAAK,GACxF,kBAAC,IAAD,CAAWD,UAAU,yCACnB,kBAAC,IAAD,CAAWA,UAAU,0BACnB,wBAAIA,UAAU,SAAd,mBAAsC,6BAAtC,KAA8C,6BAA9C,mBACA,uBAAGA,UAAU,kBAAb,yBAGA,yBAAKA,UAAU,6BACb,kBAAC,IAAD,CAAQE,QAAQ,kBAAkBC,KAAK,8EAAvC,wBAIN,kBAAC,IAAD,CAAWH,UAAU,wBACnB,uBAAGG,KAAK,aACN,kBAAC,IAAD,CAAiBC,KAAMC,SAI7B,kBAAC,IAAD,CAAWN,GAAG,WAAWE,OAAK,EAACD,UAAU,mEACvC,yBAAKA,UAAU,WAAf,krB,GAvBQM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBNC,IAAEC,UAAUC,MAAM,WAChBF,IAAE,KAAKG,GAAG,QAAS,SAAUC,GACT,KAAdC,KAAKC,OACPF,EAAMG,iBACNP,IAAE,cAAcQ,QAAQ,CACtBC,UAAWT,IAAEK,KAAKC,MAAMI,SAASC,KAChC,IAAK,WACJf,OAAOC,SAASS,KAAOD,KAAKC,YCDtCM,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,SFyH3C,kBAAmBC,WACrBA,UAAUC,cAAcd,MAAMe,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.00382b79.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Jumbotron id=\"section1\" className=\"jumbo justify-content-center align-items-center\" fluid>\n          <Container className=\"hero-container justify-content-center\">\n            <Container className=\"justify-content-center\">\n              <h1 className=\"title\">MEET XYZ COMPANY<br />AT<br />CONFERENCE 2019</h1>\n              <p className=\"stand-location\">\n                HALL 06.1, SPACE D-60\n              </p>\n              <div className=\"request-meeting-container\">\n                <Button variant=\"outline-primary\" href=\"https://pipedrivewebforms.com/form/c373977da1107edc5d391840cd2a0bbf4517240\">REQUEST A MEETING</Button>\n              </div>\n            </Container>\n          </Container>\n          <Container className=\"arrow-down-container\">\n            <a href=\"#section2\">\n              <FontAwesomeIcon icon={faArrowDown} />\n            </a>\n          </Container>\n        </Jumbotron>\n        <Container id=\"section2\" fluid className=\"biogram-container row justify-content-center align-items-center\">\n          <div className=\"biogram\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam ut felis in sem mollis interdum. Cras rhoncus nibh eu turpis laoreet, a suscipit leo congue. Sed bibendum sed felis a aliquam. In fringilla imperdiet rutrum. Donec ut faucibus turpis. Duis aliquam, justo a maximus posuere, quam diam auctor orci, ut consequat ex velit eu lectus. Praesent porttitor vitae odio eu elementum. Donec quis urna et odio dictum aliquet vel a felis. Etiam ac magna eget tortor maximus dignissim. Donec a quam nunc. Donec a nunc suscipit, convallis mauris ut, finibus orci. Mauris ornare nibh libero, vel ullamcorper mi ultrices ut. Proin tristique nisl eget ligula varius porta in vitae nisl.\n          </div>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import $ from 'jquery';\n\n$(document).ready(function () {\n  $(\"a\").on('click', function (event) {\n    if (this.hash !== \"\") {\n      event.preventDefault();\n      $('html, body').animate({\n        scrollTop: $(this.hash).offset().top\n      }, 800, function () {\n          window.location.hash = this.hash;\n      });\n    }\n  });\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../src/scripts/scroll-down-arrow';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}